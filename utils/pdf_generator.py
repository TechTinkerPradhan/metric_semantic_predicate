import numpy as np

def combined_pdf(x, y, z, params):
    """
    Compute the combined PDF at point (x, y, z).

    params: Dictionary containing all parameters, typically generated by `process_query()`.
            Should include:
              mu_x, mu_y, mu_z, sigma_s,
              x0, y0, z0, d0, sigma_m,
              theta0, phi0, kappa
    Returns:
        P_combined: Unnormalized combined PDF value at (x, y, z).
    """
    # Unpack parameters
    mu_x = params['mu_x']
    mu_y = params['mu_y']
    mu_z = params['mu_z']
    sigma_s = params['sigma_s']
    x0 = params['x0']
    y0 = params['y0']
    z0 = params['z0']
    d0 = params['d0']
    sigma_m = params['sigma_m']
    theta0 = params['theta0']
    phi0 = params['phi0']
    kappa = params['kappa']
    
    # Semantic component (3D Gaussian) 
    exponent_semantic = -((x - mu_x)**2 + (y - mu_y)**2 + (z - mu_z)**2) / (2 * sigma_s**2)
    
    # Metric component (Gaussian over distance) ---
    r = np.sqrt((x - x0)**2 + (y - y0)**2 + (z - z0)**2)
    exponent_metric = -((r - d0)**2) / (2 * sigma_m**2)
    
    # Spatial predicate component (approximate Von Mises-Fisher distribution) ---
    # Compute spherical angles for the direction from (x0, y0, z0) to (x, y, z)
    dx = x - x0
    dy = y - y0
    dz = z - z0
    r_nonzero = np.maximum(r, 1e-6)  # Avoid division by zero
    
    theta = np.arctan2(dy, dx)           # Azimuthal angle ∈ [-π, π]
    phi = np.arccos(dz / r_nonzero)      # Polar angle ∈ [0, π]
    
    # The "Von Mises-Fisher" exponent typically:  κ * (unit_vector · mean_direction)
    # approximate the dot product in spherical coords:
    exponent_spatial = kappa * (
        np.sin(phi0)*np.sin(phi)*np.cos(theta - theta0) + 
        np.cos(phi0)*np.cos(phi)
    )
    
    # Combine exp exponents 
    total_exponent = exponent_semantic + exponent_metric + exponent_spatial
    
    # Unnormalized PDF
    P_combined = np.exp(total_exponent)
    print ("Mu_x: ",mu_x, ", Mu_y: ", mu_y, ", Mu_z: ", mu_z, 
    ", sigmas:",sigma_s,
    ", x0: ",x0,
    ", y0: ",y0,
    ", z0: ",z0,
    ", d0: ",d0,
    ", sigma_m: ",sigma_m,
    ",theeta0: ",theta0,
    ",phi0: ",phi0,
    ",Kappa:",kappa)
    return P_combined